<!DOCTYPE html>

<html>
<header>
    <title> INGRID </title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
          integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"
            integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa"
            crossorigin="anonymous"></script>
    <script type="text/javascript" async
            src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>

    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">


</header>

<body>

<style>
    highlightBox {
        outline: none;
        border-color: blue;
        box-shadow: 0 0 10px blue;
    }
</style>

<% include ./partials/header %>

<p class="h1 text-center">
    <bold>Welcome to INGRID<sup>2</sup></bold>
    <small class="text-muted"> | the perfect graph theorist</small>
</p>

<!-- This is the section for the Invariants -->
<form id="invarForm" class="form-horizontal" action="/" method="post">
    <!-- The container containing all of the invariants -->

    <div class="container">
        <!-- The left column of the page with half of the numerical valued invariants -->
        <div id="firstColumn" class="container-fluid col-md-4">
        </div>

        <!-- The middle column of the page with half of the invariants -->
        <div id="secondColumn" class="container-fluid col-md-4">
        </div>

        <!-- the right column of invariants, all boolean valued -->
        <div id="thirdColumn" class="container col-sm-4">
        </div>
    </div>
</form>
<!-- Buttons for calculate, add invariant and save work -->
<div class="row">
    <div class="container col-md-6 col-md-offset-6">
        <div class="row">

            <div class="container col-sm-2 ">
                <button type="button" id="calculate" class="btn btn-primary">Calculate</button>
            </div>
            <div class="container col-sm-2">
                <!-- Trigger the modal with a button -->
                <button type="button" class="btn btn-primary" id="modalButton">Add Invariant</button>
                <!-- Modal -->
                <div class="modal fade" id="myModal" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <!-- Change the header text, leave the exit button -->
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Add a new invariant</h4>
                            </div>
                            <div class="modal-body">
                                <!-- Add the labels and tags for the invariant addition stuff here -->
                                <form class="horizontal-form">
                                    <div class="row">
                                        <div class="form-group">
                                            <label for="invarName" class="col-sm-3 control-label">Invariant Name</label>
                                            <div class="col-sm-9">
                                                <input class="form-control" id="invarName" value=""
                                                       placeholder="Invariant Name">
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label for="varName" class="col-sm-3 control-label">Variable Name</label>
                                            <div class="col-sm-9">
                                                <input class="form-control" id="varName" value=""
                                                       placeholder="Variable Name">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label for="radio-button-group" class="col-sm-3 control-label">Invariant
                                            Type</label>
                                        <div class="radio-button-group col-sm-9" id="radios">
                                            <div class="radio">
                                                <label>
                                                    <input type="radio" name="invarType" value="Real" class="toggle">
                                                    Real Valued
                                                </label>
                                                <label>
                                                    <input type="radio" name="invarType" value="Integer" class="toggle"
                                                           checked> Integer Valued
                                                </label>
                                                <label>
                                                    <input type="radio" name="invarType" value="Boolean" class="toggle">
                                                    Boolean
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <!-- this is where you add the create and cancel buttons -->
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" data-dismiss="modal" id="addInvar">
                                    Submit
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="container col-sm-2 " style="margin-left:3%;">
                <form method="get" action="">
                    <button id="save" type="button" class="btn btn-primary" style="">Save Work</button>
                </form>
            </div>
            <div class="container col-sm-4">
                <input type="hidden" class="form-control" id="hiddenField" value="">
            </div>
        </div>
    </div>
</div>
<br>

<div class="modal fade" id="trace" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="traceTitle"></h3>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul id="traceList" class="list-group">

                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Section to add theorems  -->
<form class="form-group">
    <div class="btn-group btn-group-justified dropup">
        <!-- Dropdown with invariants -->
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-block btn-default dropdown-toggle" data-toggle="dropdown"
                    aria-haspopup="true"
                    aria-expanded="false">
                Add an invariant
                <span class="caret"></span>
            </button>
            <ul id="invars" class="dropdown-menu scrollable-menu"
                style="max-height:400px; height:auto; overflow-x:hidden;" role="menu">

            </ul>
        </div>

        <!-- Dropdown with functions -->
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-block btn-default dropdown-toggle" data-toggle="dropdown"
                    aria-haspopup="true"
                    aria-expanded="false">
                Add a function
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" id="functions">
                <li><a id="sqrt"> Square root </a></li>
                <li><a id="max"> Maximum </a></li>
                <li><a id="min"> Minimum </a></li>
                <li><a id="floor"> Floor </a></li>
                <li><a id="ceil"> Ceiling </a></li>
                <li><a id="logb"> Logarithm with Base </a></li>
                <li><a id="exp"> Exp </a></li>
                <li><a id="congruent"> Congruence under modulus</a></li>
                <li><a id="mod"> Modulus </a></li>
            </ul>
        </div>
    </div>

    <div class="form-group">
        <textarea id="newTheorem" class="form-control" rows="3" placeholder="Add a new theorem here"></textarea>
        <button id="addthm" class="btn btn-block btn-primary" type="button">Add Theorem</button>
    </div>
    <div class="row text-center">
        <div id="thmText" class="container">
        </div>
    </div>

</form>

<!-- footer stuff -->
<div>
    <p class="text-center">
        If you wish to start over with the original values, you can open a new tab and go to this site.
    </p>
</div>

<!-- Script to populate the page -->
<script>
    function split(data) {
        var array = [[], [], []];
        var keys = Object.keys(data);
        keys.sort();
        var bool = true;

        keys.forEach(function (key) {
            if (data[key]["Type"] === "Bool") {
                // if the invariant is a boolean, put it in the third column
                array[2].push(key);
            }
            else {
                // if it is not a boolean, then alternate between the first and second columns
                if (bool) {
                    array[0].push(key);
                }
                else {
                    array[1].push(key);
                }
                bool = !bool;
            }
        });
        return array;
    }
    function parseAndSet(data) {
        var threes = split(data.Invariants);
        var first = threes[0];
        first.sort();
        var second = threes[1];
        second.sort();
        var third = threes[2];
        third.sort();
        var keys = Object.keys(data.Invariants);
        keys.sort();
        var column, div, label, boxone, boxtwo, close, text;
        var drop;
        for (var i = 0; i < keys.length; i++) {
            drop = document.getElementById("invars");
            drop.innerHTML += "<li><a id='" + keys[i] + "'> " + data.Invariants[keys[i]].Name + "</a></li>";
        }
        for (var i = 0; i < first.length; i++) {
            column = document.getElementById("firstColumn");
            div = "<div class='form-group text-center'>";
            label = "<label class='control-label col-sm-6'>" + data.Invariants[first[i]].Name + "</label>";
            boxone = "<input class='col-sm-3' type='text' value='" + data.Invariants[first[i]].Value.Min + "' name='" + first[i] + "min'>";
            boxtwo = "<input class='col-sm-3' type='text' value='" + data.Invariants[first[i]].Value.Max + "' name='" + first[i] + "max'>";
            close = "</div>";
            text = div + label + boxone + boxtwo + close;
            column.innerHTML += text;
        }

        for (var i = 0; i < second.length; i++) {
            column = document.getElementById("secondColumn");
            div = "<div class='form-group text-center'>";
            label = "<label class='control-label col-sm-6'>" + data.Invariants[second[i]].Name + "</label>";
            boxone = "<input class='col-sm-3' type='text' value='" + data.Invariants[second[i]].Value.Min + "' name='" + second[i] + "min'>";
            boxtwo = "<input class='col-sm-3' type='text' value='" + data.Invariants[second[i]].Value.Max + "' name='" + second[i] + "max'>";
            close = "</div>";
            text = div + label + boxone + boxtwo + close;
            column.innerHTML += text;
        }
        for (var i = 0; i < third.length; i++) {
            column = document.getElementById("thirdColumn");
            div = "<div class='form-group text-center'>";
            label = "<label class='control-label col-sm-6'>" + data.Invariants[third[i]].Name + "</label>";
            boxone = "<input class='col-sm-6' type='text' value='" + data.Invariants[third[i]].Value + "' name='" + third[i] + "'>";
            close = "</div>";
            text = div + label + boxone + close;
            column.innerHTML += text;
        }
        sessionStorage.setItem('ingridObj', JSON.stringify(data));
    }
    var data = sessionStorage.getItem('ingridObj');
    data = JSON.parse(data);
    if (!data) {
        data = JSON.parse(<%- JSON.stringify(invs); %>)
    }
    parseAndSet(data);
    var div = document.getElementById("thmText");
    data.Addenda.forEach(function (val) {
        val.Text = val.Text.replace(/\b(?!sqrt)\b\b(?!ceil)\b\b(?!floor)\b([a-zA-Z]+)/gi, function (str) {
            return '"' + str + '"';
        });
        val.Text = val.Text.replace(/(\*\*)/g, "^");
        div.innerHTML += '<p class="" style="border:1px solid black; display:inline-block;border-radius:5px;margin:10px;padding:3px;"> `' + val.Text + '`     </p>';
    });

</script>

<!-- Script to load the modal -->
<script>
    $(document).ready(function () {
        $("label").on('click', function () {
            var labelText = $(this).html();
            var obj = sessionStorage.getItem('ingridObj');
            obj = JSON.parse(obj);
            var invarString = "";
            Object.keys(obj.Invariants).forEach(function (key) {
                if (obj.Invariants[key].Name === labelText) {
                    invarString = key;
                    return;
                }
            });
            if (invarString !== "") {
                var thms = {};
                obj.Theorems.forEach(function (thmId) {
                    thms[obj[thmId].Id] = {"Name": obj[thmId].Name, "Text": obj[thmId].Text};
                });

                // populate modal then open it
                $("#traceTitle").html("Trace for: " + obj.Invariants[invarString].Name);
                // add for loop and add text in h5 and p
                obj.Invariants[invarString].Trace.forEach(function (key) {
                    // add a header and text body for each trace message in the modal.
                    var text = "<li class='list-group-item'>";
                    text += "<h5 class='list-group-item-heading'>" + obj.Inavariants[invarString].Trace[key].Message + "</h5>";
                    text += "<p class='list-group-item-text'> + thms[obj.Invariants[invarString].Trace[key].Id].Text + </p>";
                    text += "</li>";
                    $("#traceList").append(text);

                });

                $("#trace").modal();
            }
        });
        $("#functions li a").on('click', function () {
            var $txt = jQuery("#newTheorem");
            var start = $txt[0].selectionStart;
            var end = $txt[0].selectionEnd;
            var thm = $txt.val();
            var func = $(this).attr("id");
            if (func === "logb")
                $txt.val(thm.substring(0, start) + func + "(" + thm.substring(start, end) + ", base )" + thm.substring(end));
            else if (func === "mod")
                $txt.val(thm.substring(0, start) + func + "( b, c, m)" + thm.substring(start));
            else
                $txt.val(thm.substring(0, start) + func + "(" + thm.substring(start, end) + ")" + thm.substring(end));
        });
        $("#invars li a").on('click', function () {
            var $txt = jQuery("#newTheorem");
            var start = $txt[0].selectionStart;
            var thm = $txt.val();
            var inv = $(this).attr("id");
            $txt.val(thm.substring(0, start) + inv + thm.substring(start));
        });
        $("#modalButton").click(function () {
            $("#myModal").modal();
        });
        $("#addInvar").click(function () {
            var name = $("#invarName").val();
            var varName = $("#varName").val();

            if (name === "" || varName === "") {
                alert("Invariant name and Variable name cannot be empty");
                return;
            }

            var type = $("#radios input:radio:checked").val();
            var elementsInOne = $("#columnOne > div").length;
            var elementsInTwo = $("#columnTwo > div").length;
            var item = {};
            item.Name = name;
            item.Trace = [];
            item.Changed = 'True';

            if (type === "Boolean") {
                item.Value = 'undt';
                item.Type = "Bool";
            }
            else if (elementsInOne === elementsInTwo) {
                item.Value = {"Min": '1', "Max": 'undt'};
                if (type === "Real")
                    item.Type = "Real";
                else if (type === "Integer")
                    item.Type = "Integer";
                else
                    console.log("Something ain't right here");
            }
            else {

                item.Value = {"Min": '1', "Max": 'undt'};
                if (type === "Real Valued")
                    item.Type = "Real";
                else if (type === "Integer Valued")
                    item.Type = "Integer";
                else
                    console.log("Something ain't right here");
            }
            var obj = sessionStorage.getItem('ingridObj');
            if (obj !== null) {
                obj = JSON.parse(obj);
                obj.Invariants[varName] = item;
                sessionStorage.setItem('ingridObj', JSON.stringify(obj));
                location.reload();
            }
        });
        $("#calculate").click(function () {
            // get all values
            var formElements = $("#invarForm").serializeArray();
            var temp = JSON.parse(sessionStorage.getItem('ingridObj'));

            var obj = temp.Invariants;
            // regex for matching value to make sure they are legal /^[0-9]*.[0-9]*$|^undt$/gm
            formElements.forEach(function (item) {
                var name = item.name;
                var value = item.value;

                // match for true, false, undt for boolean
                // match for undt or number with decimal places if integer or real
                if (/undt|true|false/gi.test(value.toString()) || /undt|([0-9.]+)/gi.test(value.toString())) {
                    if (name.length > 3) {
                        var tag = name.slice(-3);
                        var varName = name.substring(0, name.length - 3);

                        // if we have a min value, then edit its values
                        if (tag == "min") {
                            // set Changed to true if it was already true or if the value is different
                            if (obj[varName].Changed === "False" || obj[varName].Changed === false) {
                                obj[varName].Changed = (obj[varName].Value.Min !== value ? "True" : "False");

                            }
                            obj[varName].Value.Min = value;
                        }
                        // if we have a max value then edit its max values
                        else if (tag == "max") {
                            // set Changed to true if it was already true or if the value is different
                            if (obj[varName].Changed === "False" || obj[varName].Changed === false)
                                obj[varName].Changed = (obj[varName].Value.Min !== value ? "True" : "False");
                            obj[varName].Value.Max = value;
                        }
                        // if their is a boolean value
                        else {
                            if (!['true', 'false', 'undt'].includes(value.toLowerCase())) {
                                alert("Please use one of these values for Boolean variables: true, false, undt");
                            }
                            else {
                                obj[name].Changed = (obj[name].Value !== value ? "True" : "False");
                                obj[name].Value = value;
                            }
                        }
                    }
                }
                else {
                    alert("input for " + name + " is invalid");
                }
            });

            // save values in sessionStorage
            temp.Invariants = obj;
            sessionStorage.setItem('ingridObj', JSON.stringify(temp));
            //temp = JSON.parse(temp);
            temp = JSON.stringify(temp);
            // make rpc call
            $.post("http://www.ingrid2.com/rpc", temp, function (data) {
                // fix all the values here
                sessionStorage.setItem('ingridObj', JSON.stringify(data));
                Object.keys(data.Invariants).forEach(function (key) {
                    if (data.Invariants[key].Type === "Bool") {
                        var elem = document.getElementById(key);
                        if (elem)
                            elem.value = data.Invariants[key].Value;
                    }
                    else {
                        var elem = document.getElementById(key + "min");
                        if (elem)
                            elem.value = data.Invariants[key].Value.Min;

                        elem = document.getElementById(key + "max");
                        if (elem) {
                            elem.value = data.Invariants[key].Value.Max;
                            elem.addClass('highlightBox');
                        }
                    }
                });
            }, "json");
        });
        $("#save").click(function () {
            // make XMLHttpRequest here
            var xmlhttp = new XMLHttpRequest();
            var ingrobj = sessionStorage.getItem('ingridObj');
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == XMLHttpRequest.DONE) {
                    document.getElementById('hiddenField').value = xmlhttp.responseText;
                    document.getElementById('hiddenField').type = "text";
                }
            };
            xmlhttp.open("POST", '/save');
            xmlhttp.setRequestHeader('Content-Type', "application/json;charset=UTF-8");
            xmlhttp.send(ingrobj);

        });
        $("#addthm").click(function () {
            var text = $("#newTheorem").val();
            var obj = sessionStorage.getItem('ingridObj');
            obj = JSON.parse(obj);
            var len = obj.Addenda.length + 1;

            text = text.replace(/\"/g, "");

            obj.Addenda.push({"Name": "User Theorem " + len, "Text": text});
            obj = JSON.stringify(obj);
            sessionStorage.setItem('ingridObj', obj);
            window.location.reload();
        });
    });
</script>

<footer>
    <p class="text-center"> Developed by: Steven Brown, Nathan Cruz, Kevin Duarte, and Kyle Jones<br>
        Sponsored by: Drs. Ronald Dutton, Robert Brigham, and Zixia Song
    </p>
</footer>
</body>
</html>